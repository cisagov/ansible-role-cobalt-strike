---
# Check if Cobalt Strike is already installed in the expected place
- name: Check if Cobalt Strike is already installed and licensed
  ansible.builtin.stat:
    path: /opt/cobaltstrike/cobaltstrike.auth
  register: cobaltstrike_auth

- name: Install and license Cobalt Strike
  when: not cobaltstrike_auth.stat.exists
  block:
    - name: Grab Cobalt Strike license from S3
      amazon.aws.aws_s3:
        bucket: "{{ cobalt_strike_bucket_name }}"
        object: "{{ cobalt_strike_license_object_name }}"
        dest: "/tmp/cobaltstrike.license"
        mode: get
      become: no
      delegate_to: localhost

    - name: Install curl
      ansible.builtin.package:
        name:
          - curl

    # I'd prefer to use ansible.builtin.uri here, but the following
    # code doesn't work with the Cobalt Strike site:
    # - name: Get download token from Cobalt Strike website
    #   ansible.builtin.uri:
    #     body: dlkey={{ cobaltstrike_license }}
    #     body_format: "form-urlencoded"
    #     dest: /tmp/html.html
    #     method: POST
    #     return_content: yes
    #     url: https://www.cobaltstrike.com/download
    #   become: no
    #   delegate_to: localhost
    #   register: download_token
    #   vars:
    #     cobaltstrike_license: >-
    #       "{{ lookup('file', '/tmp/cobaltstrike.license') }}"
    #
    # This is the reason for the skip_ansible_lint tag below.
    - name: Get download token from Cobalt Strike website
      ansible.builtin.command: >-
        curl https://download.cobaltstrike.com/download
        --data "dlkey={{ cobaltstrike_license }}" --output /tmp/token.html
      become: no
      delegate_to: localhost
      tags:
        - skip_ansible_lint
      vars:
        cobaltstrike_license: >-
          "{{ lookup('file', '/tmp/cobaltstrike.license') }}"

    - name: Extract the download token and download the Cobalt Strike tarball
      ansible.builtin.get_url:
        url: "https://download.cobaltstrike.com/downloads/{{ lookup('file', '/tmp/token.html') | regex_search('href=\"/downloads/(.+)/cobaltstrike-dist.zip\"', '\\1') | first }}/cobaltstrike-dist.tgz"
        dest: /tmp
        mode: '0644'

    - name: Extract the Cobalt Strike tarball
      ansible.builtin.unarchive:
        src: /tmp/cobaltstrike-dist.tgz
        dest: /opt
        remote_src: yes

    - name: Delete remote copy of Cobalt Strike tarball
      ansible.builtin.file:
        path: /tmp/cobaltstrike-dist.tgz
        state: absent

    #
    # Upgrade Cobalt Strike
    #
    - name: Install expect
      ansible.builtin.package:
        name:
          - expect
    - name: Upgrade and license Cobalt Strike
      ansible.builtin.shell: |
        set -o pipefail
        # $ ./update
        # [+] Cobalt Strike Update (20220412)
        # [*] Please enter your license key:
        # <license key>
        # [*] Checking for latest version
        # [*] Downloading the latest version of Cobalt Strike
        # Downloaded 6.5mb
        # Downloaded 10.5mb
        # <snip>
        # Downloaded 66.5mb
        # Read 67.9mb
        # [+] Download complete. Unpacking Cobalt Strike program data.
        # [+] Unpacked Cobalt Strike program data. Now verifying the download
        # [*] Download latest hashes
        # [+] Verified Cobalt Strike 4.6.0 Licensed (cobaltstrike.jar)
        # SHA-256: 939aa731685ac5c2632e4790daf034110ae4aa7237a6db72c7bba219bd450727
        # [*] Updating cobaltstrike.jar
        # [+] SUCCESS! Updated cobaltstrike.jar
        # [*] Download releasenotes.txt
        # [+] Downloaded and updated releasenotes.txt. Be sure to read this file!
        # [*] Refresh cobaltstrike.auth
        # [+] Refreshed your Cobalt Strike authorization file!
        # [+] Done!
        #
        # OR
        #
        # [+] Cobalt Strike Update (20220412)
        # [*] Please enter your license key:
        # <license key>
        # [*] Checking for latest version
        # [+] Your installation of Cobalt Strike is up to date!
        # [*] Refresh cobaltstrike.auth
        # [+] Refreshed your Cobalt Strike authorization file!
        # [+] Done!

        log_file "expect.txt"
        # Increase timeout from 10 to 600 seconds
        set timeout 300
        spawn ./update

        expect {
          -re "Please enter your license key:" {
            send [format "%s\n" {{ cobaltstrike_license }}]
          } default {
            exit 1
          }
        }

        # Bail out if we encounter these error conditions
        expect {
          -re "(Failed to download hashes|Your license key is invalid)" {
            exit 1
          }
        }

        expect {
          -re "Done" {
            exit 0
          } default {
            exit 1
          }
        }
      args:
        chdir: /opt/cobaltstrike
        creates: /opt/cobaltstrike/cobaltstrike.auth
        executable: /usr/bin/expect
      failed_when: expect.rc != 0
      # The CS license key is sensitive
      no_log: true
      register: expect
      vars:
        cobaltstrike_license: >-
          "{{ lookup('file', '/tmp/cobaltstrike.license') }}"

    - name: >
        Delete local copies of Cobalt Strike tarball and license, as well as
        the download token
      ansible.builtin.file:
        path: "/tmp/{{ item }}"
        state: absent
      become: no
      delegate_to: localhost
      loop:
        - cobaltstrike-dist.tgz
        - cobaltstrike.license
        - token.html
