---
- name: Load var file with package names based on the OS type
  ansible.builtin.include_vars: "{{ lookup('first_found', params) }}"
  vars:
    params:
      files:
        - "{{ ansible_distribution }}_{{ ansible_distribution_release }}.yml"
        - "{{ ansible_distribution }}.yml"
        - "{{ ansible_os_family }}.yml"
      paths:
        - "{{ role_path }}/vars"

# Check if Cobalt Strike is already installed in the expected place
- name: Check if Cobalt Strike is already installed
  ansible.builtin.stat:
    path: /opt/cobaltstrike
  register: cobaltstrike_directory

- name: Install and license Cobalt Strike
  block:
    - name: Grab Cobalt Strike license from S3
      amazon.aws.aws_s3:
        bucket: "{{ bucket_name }}"
        object: "{{ license_object_name }}"
        dest: "/tmp/cobaltstrike.license"
        mode: get
      become: no
      delegate_to: localhost

    - name: Install curl
      ansible.builtin.package:
        name:
          - curl

    # I'd prefer to use ansible.builtin.uri here, but the following
    # code doesn't work with the Cobalt Strike site:
    # - name: Get download token from Cobalt Strike website
    #   ansible.builtin.uri:
    #     body: dlkey={{ cobaltstrike_license }}
    #     body_format: "form-urlencoded"
    #     dest: /tmp/html.html
    #     method: POST
    #     return_content: yes
    #     url: https://www.cobaltstrike.com/download
    #     # grep --fixed-strings 'href="/downloads/' |
    #     # cut --delimiter='/' --fields=3
    #   become: no
    #   delegate_to: localhost
    #   register: download_token
    #   vars:
    #     cobaltstrike_license: >-
    #       "{{ lookup('file', '/tmp/cobaltstrike.license') | trim }}"
    #
    # This is the reason for the skip_ansible_lint tag below.
    - name: Get download token from Cobalt Strike website
      ansible.builtin.command: >-
        curl https://www.cobaltstrike.com/download
        --data "dlkey={{ cobaltstrike_license }}" --output /tmp/token.html
      become: no
      delegate_to: localhost
      tags:
        - skip_ansible_lint
      vars:
        cobaltstrike_license: >-
          "{{ lookup('file', '/tmp/cobaltstrike.license') }}"

    - name: Extract the download token and download the Cobalt Strike tarball
      ansible.builtin.get_url:
        url: "https://www.cobaltstrike.com/downloads/{{ lookup('file', '/tmp/token.html') | regex_search('href=\"/downloads/([0-9a-f]+)/cobaltstrike-dist.zip\"', '\\1') | first }}/cobaltstrike-dist.tgz"
        dest: /tmp

    - name: Copy the Cobalt Strike license
      ansible.builtin.copy:
        src: /tmp/cobaltstrike.license
        dest: /root/.cobaltstrike.license
        mode: 0400

    - name: >
        Delete local copies of Cobalt Strike tarball and license, as well as
        the download token
      ansible.builtin.file:
        path: "/tmp/{{ item }}"
        state: absent
      become: no
      delegate_to: localhost
      loop:
        - cobaltstrike-dist.tgz
        - cobaltstrike.license
        - token.html

    - name: Extract the Cobalt Strike tarball
      ansible.builtin.unarchive:
        src: /tmp/cobaltstrike-dist.tgz
        dest: /opt
        remote_src: yes

    - name: Delete remote copy of Cobalt Strike tarball
      ansible.builtin.file:
        path: /tmp/cobaltstrike-dist.tgz
        state: absent

    #
    # Upgrade Cobalt Strike
    #
    # The expect Ansible module requires pexpect.
    #
    - name: Install pexpect
      ansible.builtin.package:
        name: "{{ pexpect_package_names }}"
    - name: Upgrade Cobalt Strike
      ansible.builtin.expect:
        chdir: /opt/cobaltstrike
        command: sh ./update
        timeout: 300
        responses:
          continue: "yes"
      async: 300
      poll: 30
  when: not cobaltstrike_directory.stat.exists
